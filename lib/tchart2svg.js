// Generated by CoffeeScript 1.10.0
(function() {
  var Path, TimingChart, error, format, fs, inputs, main, optionAliases, options, output, outputDir, outputExt, processArgs, showHelp, showVersion, util;

  Path = require('path');

  fs = require('fs');

  TimingChart = require('./tchart');

  try {
    util = require('util');
  } catch (error) {
    util = require('sys');
  }

  optionAliases = {
    '-o': '--output',
    '-v': '--version',
    '-h': '--help',
    '-e': '--output-ext',
    '-d': '--output-dir'
  };

  options = {};

  inputs = [];

  output = null;

  outputDir = null;

  outputExt = 'svg';

  main = function() {
    var i, input, j, k, len, len1, len2, results, results1, results2, source, stdin, svg, ws;
    if (!processArgs()) {
      return;
    }
    if (inputs.length === 0) {
      source = '';
      stdin = process.openStdin();
      stdin.on('data', function(chunk) {
        if (chunk) {
          return source += chunk;
        }
      });
      return stdin.on('end', function() {
        var svg;
        svg = format(source);
        if (!output) {
          return process.stdout.write(svg);
        } else {
          if (outputDir) {
            output = Path.join(outputDir, output);
          }
          return fs.writeFileSync(output, svg);
        }
      });
    } else if (output) {
      if (outputDir) {
        output = Path.join(outputDir, output);
      }
      ws = fs.createWriteStream(output);
      results = [];
      for (i = 0, len = inputs.length; i < len; i++) {
        input = inputs[i];
        results.push(ws.write(format(fs.readFileSync(input).toString())));
      }
      return results;
    } else if (outputDir) {
      results1 = [];
      for (j = 0, len1 = inputs.length; j < len1; j++) {
        input = inputs[j];
        output = Path.parse(input).name + '.' + outputExt;
        output = Path.join(outputDir, output);
        svg = format(fs.readFileSync(input).toString());
        results1.push(fs.writeFileSync(output, svg));
      }
      return results1;
    } else {
      results2 = [];
      for (k = 0, len2 = inputs.length; k < len2; k++) {
        input = inputs[k];
        svg = format(fs.readFileSync(input).toString());
        results2.push(process.stdout.write(svg));
      }
      return results2;
    }
  };

  processArgs = function() {
    var arg, args, name, tchart, value;
    tchart = new TimingChart();
    args = process.argv.slice(2);
    while ((arg = args.shift()) != null) {
      if (optionAliases[arg]) {
        arg = optionAliases[arg];
      }
      if (arg.substr(0, 2) === '--') {
        name = arg.substr(2).replace('_', '-');
        if (name === 'help') {
          showHelp();
        } else if (name === 'version') {
          showVersion();
        }
        if (!args.length) {
          throw new Error("No value is given to option '" + arg + "'");
        }
        value = args.shift();
        if (name === 'output') {
          output = value;
        } else if (name === 'output-dir') {
          outputDir = value;
        } else if (name === 'output-ext') {
          outputExt = value;
        } else if (tchart.config[name.replace('-', '_')]) {
          options[name.replace('-', '_')] = value;
        } else {
          throw new Error("Irregal option '--" + name + "' is specified.");
        }
      } else {
        inputs.push(arg);
      }
    }
    return true;
  };

  format = function(source) {
    return TimingChart.format(source, options) + "\n";
  };

  showHelp = function() {
    process.stdout.write("Usage: tchart2svg [options] source1 [source2, ...]\n\noptions:\n  -o, --output     - file name to store the result\n  -d, --output-dir - directory to store the result\n  -e, --output-ext - output file extention (default 'svg')\n  -v, --version    - show the current version\n  -h, --help       - display this help and exit\n\n  --scale\n  --margin\n  --w-caption\n  --w-hold\n  --w-transient\n  --h-line\n  --h-space\n  --signal-style\n  --grid\n  --grid-offset\n  --grid-step\n  --grid-style\n  --guide-style\n  --highlight_style\n  --notcare-style\n  --caption-font\n  --signal-font\n\nexample:\n  tchart2svg sample.tchart -o sample.svg\n  tchart2svg sample.tchart -ext svg\n  tchart2svg *.tchart --output-dir svg\n  tchart2svg sample.tchart --grid on -o sample.svg\n");
    return process.exit(-1);
  };

  showVersion = function() {
    var version;
    version = JSON.parse(fs.readFileSync(Path.join(__dirname, '../package.json'))).version;
    process.stdout.write("v" + version + "\n");
    return process.exit(-1);
  };

  if (typeof exports !== "undefined" && exports !== null) {
    exports.run = main;
  } else {
    main();
  }

}).call(this);

//# sourceMappingURL=tchart2svg.js.map
